*****************************
*** CUSTOM MENU PROCEDURE ***
*****************************

PROCEDURE CUSTOM_MENU_TITLE  && TOP LEVEL MENU 
   *** THERE ARE VARIABLE TO DEFINE THE TOP LEVEL MENU NAME
   *** XMENUVAR(1,1) - RETURN .T. TO MAKE MENU VISIBLE / RETURN .F. TO MAKE MENU INVISIBLE
   *** XMENUVAR(1,2) - MENU NAME
   *** XMENUVAR(1,3) - MENU MESSAGE
   
   XMENUVAR(1,1) = .T.
   XMENUVAR(1,2) = 'Options'
   XMENUVAR(1,3) = 'Options for Shipping'
   
ENDPROC

PROCEDURE CUSTOM_MENU_DEFINE  && DEFINE MENU ITEMS
   *** CREATE A CUSTOM MENU
   *** USE INTERFACE IN THE DEFINE BAR TO CREATE YOUR OWN MENU
   
   DEFINE BAR 1 OF INTERFACE PROMPT "\<Interface Setup" MESSAGE "Interface Setup"
   ON SELECTION BAR 1 OF INTERFACE DO ODBC_SETUP_SCREEN IN SETUP_MAIN WITH 'PASSWORD'
ENDPROC

*****************************
*** CUSTOM MENU PROCEDURE ***
*****************************

************************************
*** START SHIP SCREEN PROCEDURES ***
************************************

PROCEDURE SHIPSCREEN_LOAD
   *=MESSAGEBOX('SHIP SCREEN LOAD PROCEDURE')
   *** POPULATE (LOAD_SHIP = .F.) TO STOP LOADING SHIP SCREEN
ENDPROC

PROCEDURE SHIPSCREEN_INIT
   *=MESSAGEBOX('SHIP SCREEN INIT PROCEDURE')
      
   *** ODBC VARIABLES ***
   PUBLIC ODBC_CONNECT,ODBC_HANDLE,ODBC_RETCODE
   PUBLIC ODBC_DATASOURCE,ODBC_LOGIN,ODBC_PASSWORD
   PUBLIC CUSTOM_ODBC_STATEMENT
   
   STORE .F. TO ODBC_CONNECT
   STORE '' TO ODBC_HANDLE,ODBC_RETCODE,ODBC_TOTALOPTION, CUSTOM_ODBC_STATEMENT

   SETUPFILE = 'INTERFACESETUP.DBF'
   IF ! FILE(SETUPFILE)
      =MESSAGEBOX('Interface setup file not found', 64, 'File Not Found')
      RETURN
   ENDIF
   
   USE(SETUPFILE) IN 0 ALIAS SETUPTBL SHARED
   SELECT SETUPTBL
   
   IF SETUPTBL.TYPE != 1
      =MESSAGEBOX('Invalid interface setup file', 64, 'Invalid File')
      RETURN
   ENDIF
      
   *** STORE ODBC VARIABLE INFO HERE ***
   ODBC_DATASOURCE = SETUPTBL.DSN
   ODBC_LOGIN = SETUPTBL.USER
   ODBC_PASSWORD = SETUPTBL.PASS
   
   CUSTOM_ODBC_STATEMENT = "SELECT"
   
   CUSTOM_ODBC_STATEMENT = CUSTOM_ODBC_STATEMENT + ADD_ODBC_FIELD(SETUPTBL.SHIPATTN, "SHIPATTN", 1)
   CUSTOM_ODBC_STATEMENT = CUSTOM_ODBC_STATEMENT + ADD_ODBC_FIELD(SETUPTBL.SHIPCOMP, "SHIPCOMP", 0)
   CUSTOM_ODBC_STATEMENT = CUSTOM_ODBC_STATEMENT + ADD_ODBC_FIELD(SETUPTBL.SHIPADDR1, "SHIPADDR1", 0)
   CUSTOM_ODBC_STATEMENT = CUSTOM_ODBC_STATEMENT + ADD_ODBC_FIELD(SETUPTBL.SHIPADDR2, "SHIPADDR2", 0)
   CUSTOM_ODBC_STATEMENT = CUSTOM_ODBC_STATEMENT + ADD_ODBC_FIELD(SETUPTBL.SHIPCITY, "SHIPCITY", 0)
   CUSTOM_ODBC_STATEMENT = CUSTOM_ODBC_STATEMENT + ADD_ODBC_FIELD(SETUPTBL.SHIPSTATE, "SHIPSTATE", 0)
   CUSTOM_ODBC_STATEMENT = CUSTOM_ODBC_STATEMENT + ADD_ODBC_FIELD(SETUPTBL.SHIPZIP, "SHIPZIP", 0)

   CUSTOM_ODBC_STATEMENT = CUSTOM_ODBC_STATEMENT + " FROM " + SETUPTBL.TABLE + " WHERE " + SETUPTBL.IO + " = "
   
   =MESSAGEBOX(CUSTOM_ODBC_STATEMENT, 64, 'DEBUG')
   
   *** STORE ODBC VARIABLE INFO HERE ***

   IF USED('SETUPTBL')
      SELECT SETUPTBL
      USE IN SETUPTBL
   ENDIF
   
   DO ODBC_CONNECT IN INTERFACE
ENDPROC

FUNC ADD_ODBC_FIELD(FIELDNAME, ASNAME, FIRSTFIELD)
   IF EMPTY(ALLTRIM(FIELDNAME))
      RETURN ""
   ENDIF
   ADDSTR = " " + FIELDNAME + " AS " + ASNAME
   IF FIRSTFIELD < 1
      ADDSTR = "," + ADDSTR
   ENDIF
   RETURN ADDSTR
ENDFUNC

PROCEDURE SHIPSCREEN_RELEASE
   *=MESSAGEBOX('SHIP SCREEN RELEASE PROCEDURE')
   
   DO ODBC_DISCONNECT IN INTERFACE
   
   *** ODBC VARIABLES ***
   RELEASE ODBC_CONNECT,ODBC_HANDLE,ODBC_RETCODE
   RELEASE ODBC_DATASOURCE,ODBC_LOGIN,ODBC_PASSWORD
   *** ODBC VARIABLES ***
ENDPROC

PROCEDURE FUNCTION_SHIFT_F12
   *** FUNCTION KEY CAPABLITY FROM SHIP SCREEN
ENDPROC
PROCEDURE FUNCTION_CTRL_F12
   *** FUNCTION KEY CAPABILITY FROM SHIP SCREEN
ENDPROC

*** TOOL BAR
PROCEDURE TOOLBAR_INTERFACE_CLICK
   IF ODBC_CONNECT = .T.
      DO ODBC_CONNECT IN INTERFACE
   ELSE
      DO ODBC_DISCONNECT IN INTERFACE
   ENDIF
ENDPROC
PROCEDURE TOOLBAR_REPRINT_CLICK
ENDPROC
PROCEDURE TOOLBAR_VOID_CLICK
ENDPROC
PROCEDURE TOOLBAR_CLEAR_CLICK
ENDPROC
PROCEDURE TOOLBAR_PROCESS_CLICK
ENDPROC
PROCEDURE TOOLBAR_EXIT_CLICK
ENDPROC

*** REPRINT SCREEN
PROCEDURE REPRINTSCREEN_REPRINT_CLICK
ENDPROC
PROCEDURE REPRINTSCREEN_EXIT_CLICK
ENDPROC

*** VOID SCREEN
PROCEDURE VOIDSCREEN_VOID_CLICK
ENDPROC
PROCEDURE VOIDSCREEN_EXIT_CLICK
ENDPROC

*** OBDC CONNECTION
PROCEDURE ODBC_CONNECT
   *** BAIL IF ALREADY CONNECTED
   IF ODBC_CONNECT = .T.
      STORE .T. TO ODBC_CONNECT
      RETURN
   ENDIF
   
   WAIT WINDOW 'Trying to Connect to ODBC DataSource '+ALLTRIM(ODBC_DATASOURCE)+' - PLEASE WAIT' NOWAIT NOCLEAR
   
   *** TRY TO CONNECT TO DATASOURCE
   DO CASE
      CASE EMPTY(ODBC_LOGIN)
         ODBC_HANDLE = SQLCONNECT(ODBC_DATASOURCE)
      CASE EMPTY(ODBC_PASSWORD)
         ODBC_HANDLE = SQLCONNECT(ODBC_DATASOURCE, ODBC_LOGIN)
      OTHERWISE
         ODBC_HANDLE = SQLCONNECT(ODBC_DATASOURCE, ODBC_LOGIN, ODBC_PASSWORD)
   ENDCASE
   
   WAIT CLEAR
   
   DO CASE
      CASE ODBC_HANDLE > 0
           STORE .T. TO ODBC_CONNECT
           WAIT WINDOW 'Connection to ODBC DataSource '+ALLTRIM(ODBC_DATASOURCE)+' - SUCCESSFUL!' TIMEOUT 1
      CASE ODBC_HANDLE = -1
           STORE .F. TO ODBC_CONNECT
           =MESSAGEBOX('Connection Level Error.',64,'ODBC Connection Status')
      CASE ODBC_HANDLE = -2
           STORE .F. TO ODBC_CONNECT
           =MESSAGEBOX('Environment Level Error.',64,'ODBC Connection Status')
   ENDCASE        
   
ENDPROC

*** ODBC DISCONNECTION
PROCEDURE ODBC_DISCONNECT
   *** BAIL IF ALREADY DISCONNECTED
   IF ODBC_CONNECT = .F.
      RETURN
   ENDIF
   
   ODBC_RETCODE = SQLDISCONNECT(ODBC_HANDLE)
   
   *** SET ODBC FLAG
   STORE .F. TO ODBC_CONNECT
   
   *** CHECK FOR ERRORS
   DO CASE
      CASE ODBC_RETCODE = 1
           WAIT WINDOW 'Disconnected from Datasource '+ALLTRIM(ODBC_DATASOURCE)+' - SUCCESSFUL!' TIMEOUT 1
      CASE ODBC_RETCODE = -1
           =Messagebox('Connection Level Error',16,'ODBC Connection Status')
      CASE ODBC_RETCODE = -2
           =Messagebox('Connection Level Error',16,'ODBC Connection Status')
   ENDCASE
   
ENDPROC

*** ODBC EXECUTE STATEMENT
PROCEDURE ODBC_EXECUTE (ODBC_STATEMENT)
   IF ODBC_CONNECT
      
      *=MESSAGEBOX(STATEMENT,64,'SQL STATEMENT')
      ODBC_RETCODE = SQLEXEC(ODBC_HANDLE,ODBC_STATEMENT)
      
      *** TELLS WHETER OR NOT SQL WAS COMPLETE
      IF ODBC_RETCODE < 1
         DO FORM ODBC_MESS  && DISPLAYS ODBC ERROR MESSAGE
      ENDIF
   ENDIF
ENDPROC

*** FIELDS
PROCEDURE IOPROMPT_GOTFOCUS  && ONLY RUNS WHEN THE INTERFACE
ENDPROC

PROCEDURE IOPROMPT_LOSTFOCUS  && ONLY RUNS WHEN THE INTERFACE
   *** POPULATE (STOP_SHIP WITH .T.) TO STOP PROCESSING
   
   IF ODBC_CONNECT = .T.  && MAKE SURE CONNECT TO ODBC DATASOURCE
      *** SELECT DATA FROM USPS
      ODBC_STATEMENT = CUSTOM_ODBC_STATEMENT + XIDVAR(1,1) + ""
      
      DO ODBC_EXECUTE IN INTERFACE WITH ODBC_STATEMENT
      
      IF RECCOUNT() = 0
         IF USED('SQLRESULT')
            SELECT SQLRESULT
            USE IN SQLRESULT
         ENDIF
         =MESSAGEBOX('File Name is not found! Check File Name and Reprocess Package',16,'Information...')
         STOP_SHIP = .T.
         RETURN
      ENDIF
      
      IF STOP_SHIP = .F.
         
         XIDVAR(1,1)  && INTERFACE PROMPT
         XIDVAR(1,2)  && PACKAGE ID
         XIDVAR(1,3)  && INVOICE NUMBER
         XIDVAR(1,4)  && ORDER NUMBER
         XIDVAR(1,5)  && PO NUMBER
         XIDVAR(1,6)  && DEPARTMENT NUMBER
         XIDVAR(1,7)  && REFERENCE 1
         XIDVAR(1,8)  && REFERENCE 2
         XIDVAR(1,9)  && REFERENCE3
         
         XTRANSVAR(1,2)  && TRANSLATED CARRIER CODE
         XTRANSVAR(1,2)  && TRANSLATED COUNTRY CODE
         
         XWGTVAR(1,2)  && SHIP WEIGHT
         
         XSHIPVAR(1,1)   && SHIP TO CUSTOMER NUMBER
         XSHIPVAR(1,2)   && SHIP TO COMPANY NAME
         XSHIPVAR(1,3)   && SHIP TO ATTENTION
         XSHIPVAR(1,4)   && SHIP TO ADDRESS 1
         XSHIPVAR(1,5)   && SHIP TO ADDRESS 2
         XSHIPVAR(1,6)   && SHIP TO ADDRESS 3
         XSHIPVAR(1,7)   && SHIP TO CITY
         XSHIPVAR(1,8)   && SHIP TO STATE
         XSHIPVAR(1,9)   && SHIP TO ZIPCODE
         XSHIPVAR(1,10)  && SHIP TO COUNTRY
         XSHIPVAR(1,11)  && SHIP TO COUNTRY CODE
         XSHIPVAR(1,12)  && SHIP TO PNONE NUMBER
         XSHIPVAR(1,13)  && SHIP TO FAX NUMBER
         XSHIPVAR(1,14)  && SHIP TO EMAIL ADDRESS
         
         XBILLVAR(1,1)   && BILLING METHOD   -   PREPAID / THIRD PARTY / COLLECT
         XBILLVAR(1,2)   && BILL TO CARRIER ACCOUNT NUMBER
         XBILLVAR(1,3)   && BILL TO COMPANY NAME
         XBILLVAR(1,4)   && BILL TO ATTENTION
         XBILLVAR(1,5)   && BILL TO ADDRESS 1
         XBILLVAR(1,6)   && BILL TO ADDRESS 2
         XBILLVAR(1,7)   && BILL TO ADDRESS 3
         XBILLVAR(1,8)   && BILL TO CITY
         XBILLVAR(1,9)   && BILL TO STATE
         XBILLVAR(1,10)  && BILL TO ZIPCODE
         XBILLVAR(1,11)  && BILL TO COUNTRY
         XBILLVAR(1,12)  && BILL TO COUNTRY CODE
         XBILLVAR(1,13)  && BILL TO PHONE NUMBER
         XBILLVAR(1,14)  &&  BILL TO FAX NUMBER
         XBILLVAR(1,15)  && BILL TO NUMBER
         
         XRETVAR(1,1)   && RETURN LABEL NAME     
         XRETVAR(1,2)   && RETURN LABEL ATTENTION
         XRETVAR(1,3)   && RETURN LABEL ADDRESS 1
         XRETVAR(1,4)   && RETURN LABEL CITY
         XRETVAR(1,5)   && RETURN LABEL STATE
         XRETVAR(1,6)   && RETURN LABEL ZIPCODE
         XRETVAR(1,7)   && RETURN LABEL COUNTRY
         XRETVAR(1,8)   && RETURN LABEL COUNTRY CODE
         XRETVAR(1,9)   && RETURN LABEL PONE NUMBER
         XRETVAR(1,10)  && RETURN LABEL FAX NUMBER
         XRETVAR(1,11)  && RETURN LABEL ADDRESS 2
         XRETVAR(1,12)  && RETURN LABEL ADDRESS 3
         
         XSPECVAR(1,3)   && C.O.D - .T. = COD / .F. = NO COD
         XSPECVAR(1,4)   && ADD SHIP CHARGES TO C.O.D
         XSPECVAR(1,5)   && COLLECT C.O.D FUNDS  - .T. = SECURE / .F. = UNSECURE
         XSPECVAR(1,6)   && INSURANCE - .T. = INSURANCE / .F. = NO INSURANCE
         XSPECVAR(1,8)   && SATURDAY DELIVERY - .T. = SATURDAY DELIVERY / .F. = NO SATURDAY DELIVERY
         XSPECVAR(1,9)   && SATURDAY PICKUP - .T. = SATURDAY PICKUP / .F. = NO SATURDAY PICKUP
         XSPECVAR(1,13)  && DIMENSIONAL - .T. = DIMENSIONAL / .F. = IS NOT DIMENSIONAL
         XSPECVAR(1,15)  && RESIDENTIAL - .T. = RESIDENTIAL / .F. = COMMERCIAL
         
         XSPECCHG(1,2)   && COD AMOUNT
         XSPECCHG(1,3)   && COD CHARGE
         XSPECCHG(1,4)   && INSURANCE AMOUNT
         XSPECCHG(1,5)   && INSURANCE CHARGE
         XSPECCHG(1,6)   && CALL TAG CHARGE
         XSPECCHG(1,7)   && DIMENSIONAL LENGTH
         XSPECCHG(1,8)   && DIMENSIONAL WIDTH
         XSPECCHG(1,9)   && DIMESIONAL HEIGHT
         XSPECCHG(1,10)  && DIMENSIONAL WEIGHT
         
         XMICSVAR(1,1)  && MISC1 - STORE ANY THING
         XMICSVAR(1,2)  && MISC2 - STORE ANY THING
         XMICSVAR(1,3)  && MISC3 - STORE ANY THING
         XMICSVAR(1,4)  && MISC4 - STORE ANY THING
         
         XEDCVAR(1,17)  && RUBBER STAMP 1 FIELD (ENDICIA LABEL ONLY)
         XEDCVAR(1,18)  && RUBBER STAMP 2 FIELD (ENDICIA LABEL ONLY)
         XEDCVAR(1,19)  && RUBBER STAMP 3 FIELD (ENDICIA LABEL ONLY)
         
         
         IF ! ISNULL(SQLRESULT.SHIPATTN)  && SHIP TO NAME
            *** IF LENGTH IS LONGER THAN 35 PUT THE REMANDER IN ATTENTION
            PRIVATE XLENGTH,XREMAINDER,I_WORD_FOR
            STORE 0 TO XLENGTH,XREMAINDER,I_WORD_FOR
            
            XLENGTH = LEN(ALLTRIM(SQLRESULT.SHIPATTN))
            
            IF XLENGTH > 35
               *** LOOK FOR THE WORD "FOR" AND WRAP THE REST TO THE ATTENTION LINE
               I_WORD_FOR = AT('FOR',ALLTRIM(SQLRESULT.SHIPATTN))
               I_WORD_FOR = I_WORD_FOR - 1
               
               XREMAINDER = XLENGTH - I_WORD_FOR
               XSHIPVAR(1,2) = LEFT(UPPER(ALLTRIM(SQLRESULT.SHIPATTN)),I_WORD_FOR)
               XSHIPVAR(1,3) = RIGHT(UPPER(ALLTRIM(SQLRESULT.SHIPATTN)),XREMAINDER)
            ELSE
               XSHIPVAR(1,2) = UPPER(ALLTRIM(SQLRESULT.SHIPATTN))
            ENDIF
            
            RELEASE XLENGTH,XREMAINDER,I_WORD_FOR
         ENDIF
         *IF ! ISNULL(SQLRESULT.Attention)  && SHIP TO ATTENTION
         *   XSHIPVAR(1,3) = UPPER(ALLTRIM(SQLRESULT.Attention))
         *ENDIF
         
         
         IF ! ISNULL(SQLRESULT.SHIPADDR1)  && SHIP TO ADDRESS 1
            XSHIPVAR(1,4) = UPPER(ALLTRIM(SQLRESULT.SHIPADDR1))
         ENDIF
         IF ! ISNULL(SQLRESULT.SHIPADDR2)  && SHIP TO ADDRESS 2
            XSHIPVAR(1,5) = UPPER(ALLTRIM(SQLRESULT.SHIPADDR2))
         ENDIF
         
         IF ISBLANK(ALLTRIM(XSHIPVAR(1,4)))
            XSHIPVAR(1,4) = ALLTRIM(XSHIPVAR(1,5))
            XSHIPVAR(1,5) = ''
         ENDIF
         
         IF ! ISBLANK(ALLTRIM(XSHIPVAR(1,5)))
            *** CHECK FIELDS TO MAKE SURE ADDRESS IS IN THE CORRECT FIELD
            *** ALLSO CHECK FOR APT,PO,UNIT,C/O IN ADDRESS 1 AND MOVE TO 2
            IF ISALPHA(ALLTRIM(XSHIPVAR(1,4)))  && MOVE ADDRESS1 TO ADDRESS2 AND MOVE ADDRESS2 TO ADDRESS1
               *** 1ST CHECK TO SEE IF ITS PO BOX
               IF LEFT(ALLTRIM(XSHIPVAR(1,4)),2) <> 'PO' OR LEFT(ALLTRIM(XSHIPVAR(1,4)),3) <> 'P O' OR LEFT(ALLTRIM(XSHIPVAR(1,4)),3) <> 'BOX'
                  *** SWITCH ADDRESS 1 AND 2
                  PRIVATE I_ADDR1,I_ADDR2
                  STORE SPACE(1) TO I_ADDR1,I_ADDR2
                  I_ADDR1 = ALLTRIM(XSHIPVAR(1,5))
                  I_ADDR2 = ALLTRIM(XSHIPVAR(1,4))
                  
                  XSHIPVAR(1,4) = ALLTRIM(I_ADDR1)
                  XSHIPVAR(1,5) = ALLTRIM(I_ADDR2)
                  
                  RELEASE I_ADDR1,I_ADDR2
               ENDIF
            ENDIF
         ENDIF
         
         IF ! ISNULL(SQLRESULT.ShipCity)  && SHIP TO CITY
            XSHIPVAR(1,7) = UPPER(ALLTRIM(SQLRESULT.ShipCity))
         ENDIF
         IF ! ISNULL(SQLRESULT.ShipState)  && SHIP TO STATE
            XSHIPVAR(1,8) = UPPER(ALLTRIM(SQLRESULT.ShipState))
         ENDIF
         IF ! ISNULL(SQLRESULT.ShipZip)  && SHIP TO ZIP
            XSHIPVAR(1,9) = ALLTRIM(SQLRESULT.ShipZip)
         ENDIF
         
         XSHIPVAR(1,12) = '800-772-1213'
         
         IF ! ISNULL(SQLRESULT.Dfltshipping)
            XTRANSVAR(1,1) = ALLTRIM(SQLRESULT.Dfltshipping)  && DEFAULT P08
         ELSE
            *** SETUP XTRANSVAR(1,1) SO THAT IT WILL MAKE A CHOICE BETWEEN FEDEX AND ENDICIA
            IF LEFT(ALLTRIM(XSHIPVAR(1,4)),2) = 'PO' OR LEFT(ALLTRIM(XSHIPVAR(1,4)),3) = 'P O'
               XTRANSVAR(1,1) = 'EDCX'  && ENDICIA EXPRESS
            ENDIF
         ENDIF
         
         XTRANSVAR(1,2) = 'USA'
         
         IF ! ISNULL(SQLRESULT.ReturnName)
            XRETVAR(1,1) = UPPER(ALLTRIM(SQLRESULT.ReturnName))
         ENDIF
         IF ! ISNULL(SQLRESULT.ReturnAddress1)
            XRETVAR(1,3) = UPPER(ALLTRIM(SQLRESULT.ReturnAddress1))
         ENDIF
         IF ! ISNULL(SQLRESULT.ReturnAddress2)
            XRETVAR(1,11) = UPPER(ALLTRIM(SQLRESULT.ReturnAddress2))
         ENDIF
         
         IF ! ISBLANK(ALLTRIM(OSHIP.DISPSHIP.PAGE2.SHIPFROMADDR2.VALUE))
            *** CHECK FIELDS TO MAKE SURE ADDRESS IS IN THE CORRECT FIELD
            *** ALLSO CHECK FOR APT,PO,UNIT,C/O IN ADDRESS 1 AND MOVE TO 2
            IF ISALPHA(ALLTRIM(XRETVAR(1,3)))  && MOVE ADDRESS1 TO ADDRESS2 AND MOVE ADDRESS2 TO ADDRESS1
               *** 1ST CHECK TO SEE IF ITS PO BOX
               IF LEFT(ALLTRIM(XRETVAR(1,3)),2) <> 'PO' OR LEFT(ALLTRIM(XRETVAR(1,3)),3) <> 'P O' OR LEFT(ALLTRIM(XRETVAR(1,3)),3) <> 'BOX'
                  *** MOVE ADDRESS2 TO ADDRESS1 AND BLANK OUT ADDRESS2
                  XRETVAR(1,3) = ALLTRIM(XRETVAR(1,11))
                  XRETVAR(1,11) = ''  && 
               ENDIF
            ENDIF
         ENDIF
         
         IF ! ISNULL(SQLRESULT.ReturnCity)
            XRETVAR(1,4) = UPPER(ALLTRIM(SQLRESULT.ReturnCity))
         ENDIF
         IF ! ISNULL(SQLRESULT.ReturnState)
            XRETVAR(1,5) = UPPER(ALLTRIM(SQLRESULT.ReturnState))
         ENDIF
         IF ! ISNULL(SQLRESULT.ReturnZipcode)
            XRETVAR(1,6) = UPPER(ALLTRIM(SQLRESULT.ReturnZipcode))
         ENDIF
         
      ENDIF
      IF USED('SQLRESULT')
         SELECT SQLRESULT
         USE IN SQLRESULT
      ENDIF
   ENDIF  && CHECK TO MAKE SURE CONNECTED TO ODBC
ENDPROC

PROCEDURE PKGID_GOTFOCUS
ENDPROC
PROCEDURE PKGID_LOSTFOCUS
ENDPROC

*** START OF SHIP TO ADDRESS
PROCEDURE SHIPTOCUSTOMER_GOTFOCUS
ENDPROC
PROCEDURE SHIPTOCUSTOMER_LOSTFOCUS
ENDPROC

PROCEDURE SHIPTOCOMPANYNAME_GOTFOCUS
ENDPROC
PROCEDURE SHIPTOCOMPANYNAME_LOSTFOCUS
ENDPROC

PROCEDURE SHIPTOATTN_GOTFOCUS
ENDPROC
PROCEDURE SHIPTOATTN_LOSTFOCUS
ENDPROC

PROCEDURE SHIPTOADDR1_GOTFOCUS
ENDPROC
PROCEDURE SHIPTOADDR1_LOSTFOCUS
ENDPROC

PROCEDURE SHIPTOADDR2_GOTFOCUS
ENDPROC
PROCEDURE SHIPTOADDR2_LOSTFOCUS
ENDPROC

PROCEDURE SHIPTOADDR3_GOTFOCUS
ENDPROC
PROCEDURE SHIPTOADDR3_LOSTFOCUS
ENDPROC

PROCEDURE SHIPTOCITY_GOTFOCUS
ENDPROC
PROCEDURE SHIPTOCITY_LOSTFOCUS
ENDPROC

PROCEDURE SHIPTOST_GOTFOCUS
ENDPROC
PROCEDURE SHIPTOST_LOSTFOCUS
ENDPROC

PROCEDURE SHIPTOZIP_GOTFOCUS
ENDPROC
PROCEDURE SHIPTOZIP_LOSTFOCUS
ENDPROC

PROCEDURE SHIPTOCOUNTRY_GOTFOCUS
ENDPROC
PROCEDURE SHIPTOCOUNTRY_LOSTFOCUS
ENDPROC

PROCEDURE SHIPTOPHONE_GOTFOCUS
ENDPROC
PROCEDURE SHIPTOPHONE_LOSTFOCUS
ENDPROC

PROCEDURE SHIPTOFAX_GOTFOCUS
ENDPROC
PROCEDURE SHIPTOFAX_LOSTFOCUS
ENDPROC
*** END OF SHIP TO ADDRESS PROCEDURES

*** START OF SHIP FROM ADDRESS
PROCEDURE SHIPFROMCUSTOMER_GOTFOCUS
ENDPROC
PROCEDURE SHIPFROMCUSTOMER_LOSTFOCUS
ENDPROC

PROCEDURE SHIPFROMCOMPANYNAME_GOTFOCUS
ENDPROC
PROCEDURE SHIPFROMCOMPANYNAME_LOSTFOCUS
ENDPROC

PROCEDURE SHIPFROMATTN_GOTFOCUS
ENDPROC
PROCEDURE SHIPFROMATTN_LOSTFOCUS
ENDPROC

PROCEDURE SHIPFROMADDR1_GOTFOCUS
ENDPROC
PROCEDURE SHIPFROMADDR1_LOSTFOCUS
ENDPROC

PROCEDURE SHIPFROMADDR2_GOTFOCUS
ENDPROC
PROCEDURE SHIPFROMADDR2_LOSTFOCUS
ENDPROC

PROCEDURE SHIPFROMADDR3_GOTFOCUS
ENDPROC
PROCEDURE SHIPFROMADDR3_LOSTFOCUS
ENDPROC

PROCEDURE SHIPFROMCITY_GOTFOCUS
ENDPROC
PROCEDURE SHIPFROMCITY_LOSTFOCUS
ENDPROC

PROCEDURE SHIPFROMST_GOTFOCUS
ENDPROC
PROCEDURE SHIPFROMST_LOSTFOCUS
ENDPROC

PROCEDURE SHIPFROMZIP_GOTFOCUS
ENDPROC
PROCEDURE SHIPFROMZIP_LOSTFOCUS
ENDPROC

PROCEDURE SHIPFROMCOUNTRY_GOTFOCUS
ENDPROC
PROCEDURE SHIPFROMCOUNTRY_LOSTFOCUS
ENDPROC

PROCEDURE SHIPFROMPHONE_GOTFOCUS
ENDPROC
PROCEDURE SHIPFROMPHONE_LOSTFOCUS
ENDPROC

PROCEDURE SHIPFROMFAX_GOTFOCUS
ENDPROC
PROCEDURE SHIPFROMFAX_LOSTFOCUS
ENDPROC
*** END OF SHIP FROM ADDRESS PROCEDURES

*** START OF SERVICE
PROCEDURE CARRIER_CLICK
ENDPROC
PROCEDURE CARRIER_GOTFOCUS
ENDPROC
PROCEDURE CARRIER_LOSTFOCUS
ENDPROC

PROCEDURE CARRIERSERVICE_CLICK
ENDPROC
PROCEDURE CARRIERSERVICE_GOTFOCUS
ENDPROC
PROCEDURE CARRIERSERVICE_LOSTFOCUS
ENDPROC

PROCEDURE PACKAGETYPE_CLICK
ENDPROC
PROCEDURE PACKAGETYPE_GOTFOCUS
ENDPROC
PROCEDURE PACKAGETYPE_LOSTFOCUS
ENDPROC

PROCEDURE BILLOPTION_CLICK
ENDPROC
PROCEDURE BILLOPTION_GOTFOCUS
ENDPROC
PROCEDURE BILLOPTION_LOSTFOCUS
ENDPROC

PROCEDURE THIRDPARTY_CMD_CLICK  && CLICK PROCEDURE TO THE THIRD PARTY COMMAND BUTTON
ENDPROC

*** THIRD PARTY BILLING ADDRESS SCREEN
PROCEDURE THIRDPARTY_INIT
ENDPROC
PROCEDURE THIRDPARTY_RELEASE
ENDPROC
PROCEDURE THIRDPARTY_OK_CLICK
ENDPROC
PROCEDURE THIRDPARTY_CANCEL_CLICK
ENDPROC
*** END OF THIRD PARTY ADDRESS SCREEN

PROCEDURE SHIPWGT_GOTFOCUS
ENDPROC
PROCEDURE SHIPWGT_LOSTFOCUS
ENDPROC

PROCEDURE RATEPKG_GOTFOCUS  && RUNS AT THE TIME OF RATING THE PACKAGE
ENDPROC
PROCEDURE RATEPKG_LOSTFOCUS
ENDPROC

*** OPTIONS

*** DETAIL

*** REFERENCE
PROCEDURE REFERENCE1_GOTFOCUS
ENDPROC
PROCEDURE REFERENCE1_LOSTFOCUS
ENDPROC
PROCEDURE REFERENCE2_GOTFOCUS
ENDPROC
PROCEDURE REFERENCE2_LOSTFOCUS
ENDPROC
PROCEDURE REFERENCE3_GOTFOCUS
ENDPROC
PROCEDURE REFERENCE3_LOSTFOCUS
ENDPROC

*** INTERNATIONAL DOCUMENTS

*** SWOG TAB
PROCEDURE PROCESS_SWOG
   *** POPULATE (XSTOP_SWOG = .T.) TO STOP SWOG PROCESS
ENDPROC
PROCEDURE DELETE_SWOG
   *** POPULATE (XSTOP_SWOG = .T.) TO STOP SWOG PROCESS
ENDPROC

*** EXTRA PROCEDURES DURING PROCESSING
PROCEDURE BEFORE_PROCESS
   *** RETURN (PARCEL_SHIP_CONTINUE = .F.) IF YOU WANT TO STOP THE SHIPMENT FROM PROCESSING
   *** NEED TO CHECK FOR DUPLICATES
   IF ! ISBLANK(ALLTRIM(ISCREEN_PASSWORD))
      DO CASE
         CASE ALLTRIM(XCARVAR(1,2)) == 'FEDEX'
              IF FILE('FDXDAILY.DBF')
                 USE FDXDAILY.DBF IN 0 SHARED
                 SELECT FDXDAILY
                 
                 IF INTERFACE_ON = .T.
                    SET ORDER TO IONUM
                    SEEK ALLTRIM(XIDVAR(1,1,))
                 ELSE
                    SET ORDER TO PKGID
                    SEEK ALLTRIM(XIDVAR(1,2))
                 ENDIF
                 
                 IF FOUND()
                    *** DUPLICATE RECORD FOUND SO DISPLAY PASSWORD MESSAGEBOX TO CONTINUE
                    PUBLIC I_SCREEN_NAME,I_PROCEED
                    STORE 'DUPLICATE FILE NAME' TO I_SCREEN_NAME
                    STORE .T. TO I_PROCEED
                    
                    DO ENTER_PASSWORD IN NTIS_PASSWORD
                    
                    IF I_PROCEED = .T.
                       STORE .T. TO PARCEL_SHIP_CONTINUE
                    ELSE
                       STORE .F. TO PARCEL_SHIP_CONTINUE
                    ENDIF
                    
                    RELEASE I_SCREEN_NAME,I_PROCEED
                 ENDIF
                 
                 IF USED('FDXDAILY')
                    SELECT FDXDAILY
                    USE IN FDXDAILY
                 ENDIF
              ENDIF
         CASE ALLTRIM(XCARVAR(1,2)) == 'USPS'
              IF FILE('USPDAILY.DBF')
                 USE USPDAILY.DBF IN 0 SHARED
                 SELECT USPDAILY
                 
                 IF INTERFACE_ON = .T.
                    SET ORDER TO IONUM
                    SEEK ALLTRIM(XIDVAR(1,1,))
                 ELSE
                    SET ORDER TO PKGID
                    SEEK ALLTRIM(XIDVAR(1,2))
                 ENDIF
                 
                 IF FOUND()
                    *** DUPLICATE RECORD FOUND SO DISPLAY PASSWORD MESSAGEBOX TO CONTINUE
                    PUBLIC I_SCREEN_NAME,I_PROCEED
                    STORE 'DUPLICATE FILE NAME' TO I_SCREEN_NAME
                    STORE .T. TO I_PROCEED
                    
                    DO ENTER_PASSWORD IN NTIS_PASSWORD
                    
                    IF I_PROCEED = .T.
                       STORE .T. TO PARCEL_SHIP_CONTINUE
                    ELSE
                       STORE .F. TO PARCEL_SHIP_CONTINUE
                    ENDIF
                    
                    RELEASE I_SCREEN_NAME,I_PROCEED
                 ENDIF
                 
                 IF USED('USPDAILY')
                    SELECT USPDAILY
                    USE IN USPDAILY
                 ENDIF
              ENDIF
         CASE ALLTRIM(XCARVAR(1,2)) == 'ENDICIA'
              IF FILE('EDCDAILY.DBF')
                 USE EDCDAILY.DBF IN 0 SHARED
                 SELECT EDCDAILY
                 
                 IF INTERFACE_ON = .T.
                    SET ORDER TO IONUM
                    SEEK ALLTRIM(XIDVAR(1,1,))
                 ELSE
                    SET ORDER TO PKGID
                    SEEK ALLTRIM(XIDVAR(1,2))
                 ENDIF
                 
                 IF FOUND()
                    *** DUPLICATE RECORD FOUND SO DISPLAY PASSWORD MESSAGEBOX TO CONTINUE
                    PUBLIC I_SCREEN_NAME,I_PROCEED
                    STORE 'DUPLICATE FILE NAME' TO I_SCREEN_NAME
                    STORE .T. TO I_PROCEED
                    
                    DO ENTER_PASSWORD IN NTIS_PASSWORD
                    
                    IF I_PROCEED = .T.
                       STORE .T. TO PARCEL_SHIP_CONTINUE
                    ELSE
                       STORE .F. TO PARCEL_SHIP_CONTINUE
                    ENDIF
                    
                    RELEASE I_SCREEN_NAME,I_PROCEED
                 ENDIF
                 
                 IF USED('EDCDAILY')
                    SELECT EDCDAILY
                    USE IN EDCDAILY
                 ENDIF
              ENDIF
      ENDCASE
   ENDIF
ENDPROC

PROCEDURE AFTER_PROCESS
ENDPROC

PROCEDURE BEFORE_PARCEL_DATAWRITE
   IF ODBC_CONNECT = .T.  && MAKE SURE CONNECT TO ODBC DATASOURCE
      IF INTERFACE_ON  && MEANS THE INTERFACE HAS TO BE ON IN ORDER TO CHECK SHIP CODES
         PRIVATE STRING_DATE
         STORE DTOC(XDATEVAR(1,1))+' '+ALLTRIM(STR(HOUR(DATETIME())))+':'+ALLTRIM(STR(MINUTE(DATETIME())))+':'+ALLTRIM(STR(SEC(DATETIME())))+' '+ALLTRIM(RIGHT(TTOC(DATETIME()),2)) TO STRING_DATE
         
         PRIVATE ST1
         STORE '' TO ST1
         
         ST1 = "INSERT INTO SNO_Shipping"
         ST1 = ST1 + " (FileName,TrackingNumber,ShipDate,GrossCharge,TotalSurcharge,TotalDiscount,NetCharge,BilledWeight)"
         ST1 = ST1 + " VALUES("
          ST1 = ST1 + "'"+ALLTRIM(XIDVAR(1,1))+"','"+ALLTRIM(XNUMVAR(1,5))+"','"+STRING_DATE+"',"+ALLTRIM(STR(XTOTCHGVAR(1,6),8,2))+",0,0,"+ALLTRIM(STR(XTOTCHGVAR(1,6),8,2))+","+ALLTRIM(STR(XWGTVAR(1,2),8,2))+")"

         DO ODBC_EXECUTE IN INTERFACE WITH ST1
         
         IF USED('SQLRESULT')
            SELECT SQLRESULT
            USE IN SQLRESULT
         ENDIF
         
         RELEASE STRING_DATE,ST1
      ENDIF
   ENDIF
ENDPROC
PROCEDURE AFTER_PARCEL_DATAWRITE
ENDPROC

PROCEDURE BEFORE_SWOG_DATAWRITE
ENDPROC
PROCEDURE AFTER_SWOG_DATAWRITE
ENDPROC

PROCEDURE BEFORE_LTL_DATAWRITE
ENDPROC
PROCEDURE AFTER_LTL_DATAWRITE
ENDPROC

PROCEDURE BEFORE_LABELPRINT
ENDPROC
PROCEDURE AFTER_LABELPRINT
ENDPROC

**********************************
*** END SHIP SCREEN PROCEDURES ***
**********************************

*****************************
*** START OF VOID PROCESS ***
*****************************

PROCEDURE BEFORE_VOID
   *** POPULATE (STOP_VOID) WITH .T. TO STOP EXECUTION
ENDPROC

PROCEDURE AFTER_VOID
   *** POPULATE (STOP_VOID WITH .T.) TO STOP VOID PROCESS
   PRIVATE V_TRACKNUM,V_INTERFACE
   STORE '' TO V_TRACKNUM
   STORE .F. TO V_INTERFACE
   
   IF USED('FDXDAILY')
      SELECT FDXDAILY
      V_INTERFACE = FDXDAILY.INTERFACE
      V_TRACKNUM = ALLTRIM(FDXDAILY.TRACKNUM)
   ENDIF
   IF USED('USPDAILY')
      SELECT USPDAILY
      V_INTERFACE = USPDAILY.INTERFACE
      V_TRACKNUM = ALLTRIM(USPDAILY.TRACKNUM)
   ENDIF
   IF USED('EDCDAILY')
      SELECT EDCDAILY
      V_INTERFACE = EDCDAILY.INTERFACE
      V_TRACKNUM = ALLTRIM(EDCDAILY.TRACKNUM)
   ENDIF
   
   IF V_INTERFACE = .T.
      PRIVATE ST1
      STORE '' TO ST1
      
      ODBC_STATEMENT = "UPDATE SNO_Shipping SET VoidInd = 1 WHERE TrackingNumber = '"+ALLTRIM(V_TRACKNUM)+"'"
      
      DO ODBC_EXECUTE IN INTERFACE WITH ODBC_STATEMENT
      
      IF USED('SQLRESULT')
         SELECT SQLRESULT
         USE IN SQLRESULT
      ENDIF
      
      RELEASE STRING_DATE,ST1
   ENDIF
   
   RELEASE V_TRACKNUM,V_INTERFACE
ENDPROC

***************************
*** END OF VOID PROCESS ***
***************************

******************************
*** START CLOSE PROCEDURES ***
******************************

PROCEDURE BEFORE_DHL_CLOSE
ENDPROC
PROCEDURE AFTER_DHL_CLOSE
ENDPROC

PROCEDURE BEFORE_FEDEX_CLOSE
ENDPROC
PROCEDURE AFTER_FEDEX_CLOSE
ENDPROC

PROCEDURE BEFORE_UPS_CLOSE
ENDPROC
PROCEDURE AFTER_UPS_CLOSE
ENDPROC

PROCEDURE BEFORE_USPS_CLOSE
ENDPROC
PROCEDURE AFTER_USPS_CLOSE
ENDPROC

PROCEDURE BEFORE_ENDICIA_CLOSE
ENDPROC
PROCEDURE AFTER_ENDICIA_CLOSE
ENDPROC

PROCEDURE BEFORE_SPEEDEE_CLOSE
ENDPROC
PROCEDURE AFTER_SPEEDEE_CLOSE
ENDPROC

PROCEDURE BEFORE_CITYDELV_CLOSE
ENDPROC
PROCEDURE AFTER_CITYDELV_CLOSE
ENDPROC

PROCEDURE BEFORE_CDL_CLOSE
ENDPROC
PROCEDURE AFTER_CDL_CLOSE
ENDPROC

PROCEDURE BEFORE_SILVER_CLOSE
ENDPROC
PROCEDURE AFTER_SILVER_CLOSE
ENDPROC

PROCEDURE BEFORE_CALOVER_CLOSE
ENDPROC
PROCEDURE AFTER_CALOVER_CLOSE
ENDPROC

PROCEDURE BEFORE_GENERIC_CLOSE
ENDPROC
PROCEDURE AFTER_GENERIC_CLOSE
ENDPROC

PROCEDURE BEFORE_NONRATED_CLOSE
ENDPROC
PROCEDURE AFTER_NONRATED_CLOSE
ENDPROC

PROCEDURE BEFORE_LOCAL_CLOSE
ENDPROC
PROCEDURE AFTER_LOCAL_CLOSE
ENDPROC

****************************
*** END CLOSE PROCEDURES ***
****************************
